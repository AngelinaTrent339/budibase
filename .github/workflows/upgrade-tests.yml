name: Upgrade Tests

on:
  pull_request:
    paths:
      # Server-side packages that affect upgrade compatibility
      - "packages/worker/**"
      - "packages/server/**"
      - "packages/backend-core/**"
      - "packages/shared-core/**"
      # The upgrade tests themselves
      - "packages/upgrade-tests/**"
      # Docker and hosting changes that affect the build
      - "hosting/**"
      - "Dockerfile"
      - "docker-compose.yml"
      # This workflow file
      - ".github/workflows/upgrade-tests.yml"
  workflow_dispatch:

env:
  INTERNAL_API_KEY: budibase
  BB_ADMIN_USER_EMAIL: admin@example.com
  BB_ADMIN_USER_PASSWORD: admin123!

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-test-config:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            packages/upgrade-tests/src/fixtures
      
      - name: Get available test apps
        id: apps
        run: |
          # Find all .tar.gz files in fixtures and extract app names
          cd packages/upgrade-tests/src/fixtures
          
          # Get list of apps and format as JSON array
          if ls *.tar.gz >/dev/null 2>&1; then
            APPS=$(ls *.tar.gz | sed 's/\.tar\.gz$//' | jq -R . | jq -s -c .)
          else
            APPS='["no-apps"]'
          fi
          
          echo "apps=${APPS}" >> $GITHUB_OUTPUT
          echo "Found test apps: ${APPS}"
      
      - name: Get versions to test
        id: versions
        run: |
          # Fetch last 5 minor versions from Docker Hub
          # Using Docker Hub API to get tags
          RESPONSE=$(curl -s "https://hub.docker.com/v2/repositories/budibase/budibase/tags?page_size=100")
          
          # Extract version tags (excluding latest, develop, etc) and format as JSON array
          VERSIONS=$(echo "$RESPONSE" | jq -c '
            .results 
            | map(select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) 
            | map(.name) 
            | map(split(".") | {major: .[0] | tonumber, minor: .[1] | tonumber, patch: .[2] | tonumber, version: .}) 
            | group_by("\(.major).\(.minor)") 
            | map(max_by(.patch)) 
            | sort_by(.major, .minor) 
            | reverse 
            | .[0:5] 
            | map(.version | join("."))
          ')

          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
          echo "Testing versions: ${VERSIONS}"

  test-upgrade:
    needs: get-test-config
    if: needs.get-test-config.outputs.apps != '["no-apps"]'
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.get-test-config.outputs.versions) }}
        app: ${{ fromJson(needs.get-test-config.outputs.apps) }}
    runs-on: ubuntu-latest
    name: Test ${{ matrix.version }} - ${{ matrix.app }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: yarn
      
      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build upgrade tests
        run: |
          cd packages/upgrade-tests
          yarn build

      - name: Run upgrade test
        env:
          BUDIBASE_TIMEOUT: 180000  # 3 minutes timeout for app imports
        run: |
          cd packages/upgrade-tests
          yarn test:upgrade full --from ${{ matrix.version }} --app ${{ matrix.app }}

  test-no-apps:
    needs: get-test-config
    if: needs.get-test-config.outputs.apps == '["no-apps"]'
    runs-on: ubuntu-latest
    steps:
      - name: No test apps found
        run: |
          echo "⚠️ No test apps found in fixtures directory"
          echo "Please add .tar.gz app exports to packages/upgrade-tests/src/fixtures/"
          exit 1